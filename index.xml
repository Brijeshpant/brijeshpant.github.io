<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brijesh Pant</title>
    <link>brijeshpant.com/</link>
    <description>Recent content on Brijesh Pant</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pantbrijesh20@gmail.com (brijesh pant)</managingEditor>
    <webMaster>pantbrijesh20@gmail.com (brijesh pant)</webMaster>
    <lastBuildDate>Sun, 21 Feb 2016 14:14:56 +0530</lastBuildDate>
    <atom:link href="brijeshpant.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Link your github page to your domain</title>
      <link>/brijeshpant.com/2016/02/mapping-gitub-page-to-your-preferred-domain-name/</link>
      <pubDate>Sun, 21 Feb 2016 14:14:56 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/02/mapping-gitub-page-to-your-preferred-domain-name/</guid>
      <description>&lt;p&gt;For the developers it is quite common now a days to create there blogs,websites using the same tool which they use to version control their code.
Yes i am talking about git.You can create your static github pages using &lt;a href=&#34;https://pages.github.com&#34; target=&#34;_blank&#34;&gt;github pages&lt;/a&gt;
and then using the Static site generators like &lt;a href=&#34;https://gohugo.io/overview/introduction/&#34; target=&#34;_blank&#34;&gt; hugo &lt;/a&gt; or &lt;a href=&#34;https://jekyllrb.com&#34; target=&#34;_blank&#34;&gt;jekyl&lt;/a&gt;
you can build your website.Being on the github these websites are accessible using your [githubranchname].github.io
But usually you would like people to access your website using your preferred domain name. right?&lt;/p&gt;

&lt;p&gt;For that very purpose you can follow these simple steps.
First thing you need to do is make your git repository aware of your domain name.&lt;/p&gt;

&lt;p&gt;this can be done by adding CNAME file in your repository at the root level. In this file add your domain name. i.e. if your domain name is www.mydomainname.com. just add one line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;www.mydomainname.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in your CNAME file. make sure to right CNAME in uppercase.&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to change Settings in your domain provider&lt;/p&gt;

&lt;p&gt;I will take example of  &lt;a href=&#34;https://in.godaddy.com&#34; target=&#34;_blank&#34;&gt; go daddy &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your go daddy account select My Products option from the drop down menu at the top right corner&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;brijeshpant.com/media/myproduct.png&#34; alt=&#34;My products&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You will see list of the products. One of them will be the Domains.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;brijeshpant.com/media/domains.png&#34; alt=&#34;Domains&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Click Manage button against the domains.&lt;/p&gt;

&lt;p&gt;you will see all of your domains listed. Just go to the DOMAIN DETAILS page by selecting Manage DNS from your preferred domain.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;brijeshpant.com/media/manageDns.png&#34; alt=&#34;Manage DNS&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here you have to modify two things&lt;/p&gt;

&lt;p&gt;A record and the CName alias&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;brijeshpant.com/media/domainSettings.png&#34; alt=&#34;Domains Settings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For editing A record enter ip address of your github page.&lt;/p&gt;

&lt;p&gt;you can find ip address  of your github page using following command on your terminal&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; dig yourgitgubrepo.gitgub.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ip associated with A record is the ip of your github page.
 Add this ip to your A record in the Points To section of @ host .&lt;/p&gt;

&lt;p&gt;For adding alias CName.
 add one more entry for your host
 add www in host field and your githubrepo.github.io in the Points to field.
 And then save the setting these changes will take at most 24 hrs to get reflected.If you are lucky you will see them in couple of minutes.&lt;/p&gt;

&lt;p&gt;you can cross verify these changes by applying following Command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; www.yourdomainname
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are able to see the ip,you added with the A record you are good to go. otherwise you would have to wait for little longer.&lt;/p&gt;

&lt;p&gt;once these changes are reflected. you can just use your domain name to access your website and share with your viewers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Make yourself comfortable with vim</title>
      <link>/brijeshpant.com/2016/02/learningvim/</link>
      <pubDate>Sat, 06 Feb 2016 00:36:02 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/02/learningvim/</guid>
      <description>

&lt;p&gt;Being developer it looks quite fancy of modifying the text file  using the command line tools such as vim,nano etc. But When i started working on command line text editors it was quite annoying at first. I tried multiple time to work with cli but duo to not having enough knowledge of shortcut keys i was like handicapped and have to go back to my old friends (Ui text editors) . In the local systems it was fine but More than often i had to search through server logs, modifying configuration files in remote servers. And while accessing those remote system you do not have such luxury and you have to use cli  only. Then i decided to learn shortcut keys to make my life easier. after getting  my hands dirty it was like charm working with these editors.&lt;/p&gt;

&lt;p&gt;This post is walkthrough over some of the keys which might come handy while working with vim.&lt;/p&gt;

&lt;p&gt;To start with  just go to your terminal&lt;/p&gt;

&lt;p&gt;For creating new file type vim yourFilename&lt;/p&gt;

&lt;p&gt;if the file with the file name specified by you doesn’t exists a new file with the same name will be created, otherwise existing file will be opened.&lt;/p&gt;

&lt;p&gt;in vim there are two modes of execution&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;normal mode&lt;/strong&gt; : Here you can navigate through the file using shortcut keys, but you can not type anything&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Insert mode&lt;/strong&gt; : This is the mode where you can edit your file, but you can not apply any command.&lt;/li&gt;
&lt;li&gt;Insert mode has following options&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;i&lt;/strong&gt; to start inserting before the cursor pointer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; to start inserting at the starting of the current line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;a&lt;/strong&gt; to append before the cursor pointer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt; to append at the last of line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default your file will be opened in normal mode.For switching  to insert mode press &amp;lsquo;&lt;strong&gt;i&lt;/strong&gt;&amp;rsquo; . and for switching  back to the normal mode press &lt;strong&gt;esc&lt;/strong&gt; key.&lt;/p&gt;

&lt;p&gt;For applying any command Make sure you are working in normal mode.&lt;/p&gt;

&lt;p&gt;After adding some text in your file when you think you are done. go to normal mode and then type &amp;lsquo;&lt;strong&gt;:&lt;/strong&gt;&amp;rsquo; with following options&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;q!&lt;/strong&gt; to quit without saving new changes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; to saving the changes.File will still be open&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;:saveas&lt;/strong&gt; filename (if you did not provided the file name already. i.e. If you opened vim using &lt;strong&gt;vim&lt;/strong&gt; without file name)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;wq!&lt;/strong&gt;  to saving the changes and then and quit. alternate of this command is (shift +zz key)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we will learn to navigate through file&lt;/p&gt;

&lt;h1 id=&#34;navigation:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;Navigation&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0&lt;/strong&gt; move cursor to start of the current line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$&lt;/strong&gt; move cursor to end of current line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gg&lt;/strong&gt; move cursor to start of the first line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G&lt;/strong&gt; move cursor to start of the last line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;G$&lt;/strong&gt; move cursor to end of the last line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;h&lt;/strong&gt; move cursor to left of current position.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;l&lt;/strong&gt; move cursor to right of current position.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;k&lt;/strong&gt; move cursor to one line up.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;j&lt;/strong&gt; move cursor to one line down.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;w&lt;/strong&gt; move starting of the next word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;e&lt;/strong&gt; move end of the next word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;b&lt;/strong&gt; move starting of the previous word.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;)&lt;/strong&gt; move one sentence forward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;(&lt;/strong&gt; move one sentence backward.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;}&lt;/strong&gt; move one paragraph forward.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;{&lt;/strong&gt; move one paragraph backward.&lt;/p&gt;

&lt;h1 id=&#34;screen-navigation:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;Screen navigation&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ctrl+f&lt;/strong&gt; page down&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ctrl+b&lt;/strong&gt; page up&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt; move top of the screen.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;M&lt;/strong&gt; move middle of the screen.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt; move bottom of the screen.
#Insert&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;o&lt;/strong&gt; this will add new line below the current line.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt; this will add new line above the current line.
Both of these command will automatically change the mode to insert mode.&lt;/p&gt;

&lt;h1 id=&#34;delete:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;Delete&lt;/h1&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;x&lt;/strong&gt; delete character on cursor position.keep pressing x to remove characters on Right.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt; delete character on left to cursor position&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;dd&lt;/strong&gt; delete line.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;dw&lt;/strong&gt; delete one word
these delete commands actually along with deleting copies the text. So you can past the last copied text using &lt;strong&gt;p&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: use any number key to multiply the action by that number . i.e.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3j to move cursor 3 lines up.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;5dw to delete 5 words.&lt;/p&gt;

&lt;h1 id=&#34;repetition:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;Repetition&lt;/h1&gt;

&lt;p&gt;you can repeat any action by using &lt;strong&gt;.&lt;/strong&gt;. i.e.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;let say you added some text. press &lt;strong&gt;esc&lt;/strong&gt; than &lt;strong&gt;.&lt;/strong&gt; .text will be duplicated.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if your last command is &lt;strong&gt;5x&lt;/strong&gt;. it will delete 5 characters. then &lt;strong&gt;.&lt;/strong&gt; will remove the next 5 characters.&lt;/p&gt;

&lt;h1 id=&#34;replace-character:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;Replace character&lt;/h1&gt;

&lt;p&gt;if you want to replace the character under cursor position,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;r&lt;/strong&gt; and the character you want to replace with.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt; and the character you want to replace. this will replace the character and will take you to insert mode.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;SS&lt;/strong&gt; to substitute current line.
#Redo/undo&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;u&lt;/strong&gt; undo the last action.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;ctrl+r&lt;/strong&gt; to redo the last change&lt;/p&gt;

&lt;h1 id=&#34;search:c786b87c7a6a408d29c6bd3e6effb1b6&#34;&gt;search&lt;/h1&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Search is the most important action when working with the text file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;press &lt;strong&gt;f&lt;/strong&gt; with the character to search . i.e. fp will search next p.&lt;/li&gt;
&lt;li&gt;press &lt;strong&gt;F&lt;/strong&gt; with the character to search. i.e. fp will search previous p.&lt;/li&gt;
&lt;li&gt;press ***** to find next occurrence of current word.&lt;/li&gt;
&lt;li&gt;press &lt;strong&gt;#&lt;/strong&gt; to find previous occurrence of current word.&lt;/li&gt;
&lt;li&gt;press &lt;strong&gt;/&lt;/strong&gt; it will lead you to bottom of the terminal. then enter any word.it will take you to the first occurrence of that word.&lt;/li&gt;
&lt;li&gt;for all of these command, press &lt;strong&gt;n&lt;/strong&gt; to go to next character/word,press &lt;strong&gt;N&lt;/strong&gt; to move to previous character/word
#Move line&lt;/li&gt;
&lt;li&gt;press &lt;strong&gt;:&lt;/strong&gt; and then&lt;/li&gt;
&lt;li&gt;**m ** and the number to move line up or down(-) by that number. i.e. m5 to move current line 5 line up. or -5 to move 5 line down.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m0&lt;/strong&gt; to move line before first line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;m$&lt;/strong&gt; to move line at the last.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3,5m10&lt;/strong&gt; to move line number 3 to 5 after t10’th line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.,5m 10&lt;/strong&gt; to move current line +next 4 lines after the 10&amp;rsquo;th line.
*
These are the basic command which will be most oftenly used while working with vim.practice will make you perfect and comfortable.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using Spray JSON to build your REST API</title>
      <link>/brijeshpant.com/2016/02/spray-json-support/</link>
      <pubDate>Mon, 01 Feb 2016 22:43:02 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/02/spray-json-support/</guid>
      <description>&lt;p&gt;For any of the rest application it’s state has to be serialize or deserialized while transferring back and forth between application and the network. spray-json provide such support for the json based state representation.
 For using spray-json we just need to  add &amp;lsquo;spray-json&amp;rsquo; dependency in the project. For instance adding support in the sbt project add following to the build file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;io.spray&amp;quot; %% &amp;quot;spray-json&amp;quot; % &amp;quot;1.3.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spray-json provides JsonFormater to serialize/deserialize all of the scala types. i.e. for String type
we have existing StringJsonFormat&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit object StringJsonFormat extends JsonFormat[String] {
  def write(x: String) = {
    require(x ne null)
    JsString(x)
  }
  def read(value: JsValue) = value match {
    case JsString(x) =&amp;gt; x
    case x =&amp;gt; deserializationError(&amp;quot;Expected String as JsString, but got &amp;quot; + x)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which read JsString and convert it to Scala String and vise-versa.&lt;/p&gt;

&lt;p&gt;In similar way spray-json provides different traits to support serialization of all of the Scala basic types,tuples,collection etc.
Formater for all of these types are clubbed together in the trait called DefaultJsonProtocol. So for serializing/deserializing these types we just need to
put this implicit types in the scope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import spray.json.DefaultJsonProtocol._

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following test should be proof of the correct conversion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val jsString =  new JsString(&amp;quot;JsString&amp;quot;)
assert(StringJsonFormat.read(jsString).equals(&amp;quot;JsString&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;additionally spray json provides methods to convert the object into json or vice versa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsString.convertTo[String]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which converts JsValue to the type.&lt;/p&gt;

&lt;p&gt;For converting type into json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;String&amp;quot;.toJson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: for using toJson&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import spray.json._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any of the user defined type. We have to create our own Formatter. But that isn&amp;rsquo;t any harder.&lt;/p&gt;

&lt;p&gt;let say we have a case class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class User(name:String,email:String,isActive:Boolean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now to support serialization we need to create a new protocol&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object UserProtocol extends DefaultJsonProtocol {
    implicit val userFormat = jsonFormat3(User)
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;our protocol extends the DefaultJsonProtocol. and depending on the attributes in the case class we need to just call the jsonFormatn
where n is the no of attributes in the case class.
spray json provides such support for all the possible no&amp;rsquo;s of attribute of the case class as long as their type is supported by the DefaultJsonProtocol.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UserProtocol._
import spray.json._
test(&amp;quot;User object should be able to convert into json and vise-versa&amp;quot;) {
   import UserProtocol.userFormat
   val user = User(&amp;quot;brij&amp;quot;,&amp;quot;pantbrijesh20@gmail.com&amp;quot;,true)
   val aa = user.toJson
   val userJson = &amp;quot;&amp;quot;&amp;quot;{&amp;quot;name&amp;quot;:&amp;quot;brij&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;pantbrijesh20@gmail.com&amp;quot;,&amp;quot;isActive&amp;quot;:true}&amp;quot;&amp;quot;&amp;quot;
   assert(user.toJson.toString == userJson)
   assert(userJson.parseJson.convertTo[User] == User(&amp;quot;brij&amp;quot;,&amp;quot;pantbrijesh20@gmail.com&amp;quot;,true) )

 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general custom type doesn&amp;rsquo;t only contains predefined types but also the user defined types. In this case additionally to the DefaultJsonProtocol we need to have the protocol for the user defined type in the scope.
for example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class UserProfile(user:User,profile:String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here User profile has User type as its attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit val userProfileFormat = jsonFormat2(UserProfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this will only work if &lt;code&gt;
implicit val userFormat = jsonFormat3(User)&lt;/code&gt; will be in it&amp;rsquo;s scope.&lt;/p&gt;

&lt;p&gt;What we can to do is all the custom protocol can be wrapped in a single trait. In this case you just ned to include this trait into your scope.&lt;/p&gt;

&lt;p&gt;The above approach works good when we are dealing with case classes. But if we have to work with Scala class, we will have to do more work than this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person(val name: String, val age: Int)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;object PersonProtocol {
    def write(p: Person) = JsArray(JsString(p.name), JsNumber(p.age))

    def read(value: JsValue) = {
      value.asJsObject match {
        case Seq(JsArray(Vector(JsString(name), JsNumber(age)))) =&amp;gt; new Person(name, age.toInt)
        case _ =&amp;gt; throw new DeserializationException(&amp;quot;object not convertable&amp;quot;)
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we will have to write our own read and write function&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Customizing Angular Directives</title>
      <link>/brijeshpant.com/2016/01/customizingangulardirectives/</link>
      <pubDate>Sat, 30 Jan 2016 15:36:44 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/01/customizingangulardirectives/</guid>
      <description>

&lt;h1 id=&#34;customizing-angular-directives:ceb9c000a2f334563e8c78f9f222806f&#34;&gt;Customizing Angular Directives&lt;/h1&gt;

&lt;p&gt;While developing Angular Application we have a obvious choice of using third party directives. Most of the time these directive are suffice to handle all the use cases. But situation may occur when you feel that there is really something missing to fulfill your Specific problem. Common practice is to add your own custom directive along with the directive, you want to use in the element. But It sounds quite weird to Have two directives to solve the same problem. Hence we might have to think of some different way.&lt;/p&gt;

&lt;p&gt;In this Post i will share one of the Scenario in above said category and solution to that of-course.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let us take an example of uibootstrap datepicker-popup directive to show the datepicker. This directive can be used in HTML like this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; [input type=&amp;quot;text&amp;quot; class=&amp;quot;form-control&amp;quot; datepicker-popup=&amp;quot;{{format}}&amp;quot;
      ng-model=&amp;quot;date&amp;quot; data-show-button-bar=&amp;quot;false&amp;quot; data-datepicker-mode =&amp;quot;mode&amp;quot; is-open=&amp;quot;opened&amp;quot; close-text=&amp;quot;Close&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will do pretty much all the jobs one can expect from the date picker. As per the requirements you can add more options available with this directive. You might use this date picker in several places across your application. Most of the time you will find same configuration. For this you will be repeating the same piece of code again and again. I don&amp;rsquo;t really like this and sure you as well.&lt;/p&gt;

&lt;p&gt;There is one more scenario. Your back end API gives you date in different format than what you have to display in the GUI and similarly you have to send back to API in different format. For this we have to first change the date string to date before passing to the directive. And also change the date before sending back to back end API. Again you are going to do it in every controller managing the HTML.&lt;/p&gt;

&lt;p&gt;To handle both the above cases we can write a custom directive that will internally use the datepicker-popup directive. We will provide all the options in custom directive and then this can be used every where else.&lt;/p&gt;

&lt;p&gt;Here is the example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;directive(&#39;CustomDatepicker&#39;, function ($compile, $filter) {
         return {
             restrict: &#39;A&#39;,
             scope   : {
                   CustomDatepicker: &amp;quot;=&amp;quot;
             },
             link    : function ($scope, element) {
               $scope.mode = &amp;quot;year&amp;quot;;
               var timestamp = Date.parse($scope.CustomDatepicker);
               if (!isNaN(timestamp)) {
                   $scope.date = new Date(timestamp);
               }

               element.attr(&#39;data-datepicker-popup&#39;, &amp;quot;dd-MM-yyyy&amp;quot;);
               element.attr(&#39;data-ng-model&#39;, &#39;date&#39;);
               element.attr(&#39;data-is-open&#39;, &#39;datePicker.open&#39;);
               element.attr(&#39;data-show-button-bar&#39;, false);
               element.attr(&#39;data-ng-click&#39;, &#39;datePicker.open = true&#39;);
               element.attr(&#39;data-datepicker-mode&#39;, &#39;mode&#39;);
               element.removeAttr(&amp;quot;data-custom-datepicker&amp;quot;);
               $scope.$evalAsync(function (scope) {
                   $compile(element)(scope);
             });

             $scope.$watch(&#39;date&#39;, function () {
               if ($scope.date) {
                   $scope.customDatepicker = $filter(&#39;date&#39;)($scope.date, &amp;quot;yyyy-MM-dd&amp;quot;);
               }
             });

         }
        };
      });
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the custom directive i have defined the scope variable customDatepicker that holds the date value as received by your controller. Now change this date string to proper date&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var timestamp = Date.parse($scope.customDatepicker);
if (!isNaN(timestamp)) {
$scope.date = new Date(timestamp);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will add datepicker and all of the other options that we needed. This can be done using attr method of the element.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;element.attr(&#39;data-datepicker-popup&#39;, &amp;quot;dd-MM-yyyy&amp;quot;);
element.attr(&#39;data-ng-model&#39;, &#39;date&#39;);
element.attr(&#39;data-is-open&#39;, &#39;datePicker.open&#39;);
element.attr(&#39;data-show-button-bar&#39;, false);
element.attr(&#39;data-ng-click&#39;, &#39;datePicker.open = true&#39;);
element.attr(&#39;data-datepicker-mode&#39;, &#39;mode&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove custom-datepicker as it is no longer needed. element.removeAttr(&amp;ldquo;data-custom-datepicker&amp;rdquo;); to apply the DOM changes in the link function add following lines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.$evalAsync(function (scope) {
$compile(element)(scope);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will update the DOM in next digest cycle. Finally as we have bind different scope variable with the date picker, our original scope variable remain unchanged. So we need this to be updated . To achieve this we will add watch on date And update the customDatepicker whenever date will be changed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$scope.$watch(&#39;date&#39;, function () {
if ($scope.date) {
$scope.customDatepicker = $filter(&#39;date&#39;)($scope.date, &amp;quot;yyyy-MM-dd&amp;quot;);
}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the HTML we just have to add following code&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[input type=&amp;quot;text&amp;quot; data-custom-datepicker=&amp;quot;input.date&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will implicitly add date-picker and all the associated options.Also you need not to worry for the date format in every controller. Date format that will be displayed is dd-MM-yyyy and the output format will be yyyy-MM-dd. Similarly you can customize your other directives as well. Happy coding&amp;hellip;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Progressively Uploading Csv using Play</title>
      <link>/brijeshpant.com/2016/01/progressivelyuploadingcsv/</link>
      <pubDate>Sat, 30 Jan 2016 15:16:28 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/01/progressivelyuploadingcsv/</guid>
      <description>

&lt;h1 id=&#34;progressively-uploading-csv&#34;&gt;Progressively Uploading CSV&lt;/h1&gt;

&lt;h1 id=&#34;scenario&#34;&gt;Scenario&lt;/h1&gt;

&lt;p&gt;You may have encountered situations, when you need to send huge amount of data (in GBs ) to the server.  One example is upload of large files. While sending this data, your server has to slog through the upcoming mighty request body and eventually process it.&lt;/p&gt;

&lt;h1 id=&#34;problem-definition&#34;&gt;Problem Definition&lt;/h1&gt;

&lt;p&gt;So this whole process is about getting chunk of data, wait for next chunk to come and then wait again and this goes on until it receives whole request body.  All the request body data is now in servers memory. And multiple simultaneous uploads would invariably lead to a OOM error.&lt;/p&gt;

&lt;p&gt;Also till the request body is saved to disk the file/request data resides in memory and blocks the thread. As you would imagine both memory and threads are precious and scant resources.&lt;/p&gt;

&lt;p&gt;In such conditions, what can you expect but the frustratingly slow response? Would it not be nice if there is a way to handle such requests in a smarter way?&lt;/p&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;As the browser sends data in chunks of byte over the network, processing the incoming data in chunks would be a smarter choice. Play2 framework provides such a beautiful capability in the form  of Iteratee library. Iteratees support the consumption of data in chunks and in an asynchronous manner. For more detail of Iteratee you can browse through Iteratee.&lt;/p&gt;

&lt;h1 id=&#34;iteratee&#34;&gt;Iteratee&lt;/h1&gt;

&lt;p&gt;For now you need to understand what Iteratee can do to solve our problem. Iteratee requires producer that can feed iteratee the data to process. Producer can be any Enumerator which has capability to produce data of same type as the Iteratee expects. Iteratee can consume the chunks of data progressively. It does not need all data to be radially available. It can consume data chunks whenever it is available. Iteratee doses not wait on any upcoming chunks. It is the responsibility of producer to feed Iteratee. After receiving data chunk Iteratee can start processing it.&lt;/p&gt;

&lt;p&gt;Here we will see the example code for uploading the csv file progressively. This is a Play-scala application so you need to set the required environment. Once you done with creating a play application, you are ready to go further. Here are instructions on   &lt;a href=&#34;https://www.playframework.com/documentation/2.2.x/Installing&#34;&gt;how to install and setup play&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;code&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;Make entries for your routes in Routes file&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET / controllers.Application.index //For opening home page
POST /upload controllers.Application.upload //Post request to upload file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create scala html template index.scala.html .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@helper.form(action = routes.Application.upload, &#39;enctype -&amp;gt; &amp;quot;multipart/form-data&amp;quot;) { Please upload file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add following methods in Application controller to put your handler for requests&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def index = Action {
Ok(views.html.index())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;index method just upon up your home page from where CSV file can be uploaded.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def upload = Action(BodyParser(request =&amp;gt; { CsvBodyParser.parseCsvData(false)})) {
rq: Request[List[String]] =&amp;gt;
Ok(&amp;quot;file uploaded successfully&amp;quot;)
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The upload method, handles the post request containing the body. You can see BodyParser is used explicitly with the Action. By default all Action takes play.api.mvc.AnyContent as BodyParser to parse the request to some Scala value.it adapts automatically according to the request Content-Type. BodyParser[A] is basically an Iteratee[Array[Byte],A] which consumes the chunk of data as Array[Byte] as long as browser sends them and return the type A which is passed into the Request to be processed by Action. Here is the helper class CsvBodyParser which parses the request and return List[String]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package controllers
import play.api.libs.iteratee.{Iteratee, Enumeratee, Parsing}
import scala.List
import scala.Predef._
import scala.Predef.String
import play.api.Logger

object CsvBodyParser {
	var flag = false
	var headerList: List[String] = null

	def parseCsvData(f: Boolean) = {
		headerList = null
		flag = f
		val seperator = &amp;quot;,&amp;quot;
		Parsing.search(&amp;quot;n&amp;quot;.getBytes) &amp;gt;&amp;lt;&amp;gt; Enumeratee.grouped(
			(Enumeratee.breakE[Parsing.MatchInfo[Array[Byte]]] (_.isMatch)  &amp;gt;&amp;lt;&amp;gt;
				Enumeratee.collect {
					case Parsing.Unmatched(bytes) =&amp;gt;
					val stringVal =new String(bytes)
					stringVal
				}
				&amp;amp;&amp;gt;&amp;gt;
				Iteratee.consume()).flatMap(r =&amp;gt; {
					if (flag) {
						Iteratee.head.map(_ =&amp;gt; processLine(r.trim.split(seperator)))
						} else {
							val list = r.toString.trim.split(seperator).toList
							if (list.length &amp;gt; 0 &amp;amp;&amp;amp; list.head.equals(&amp;quot;name&amp;quot;)) {
								headerList = list
								flag = true
							}
							Iteratee.head.map(_ =&amp;gt; &amp;quot;&amp;quot;)
						}
						})
				) &amp;amp;&amp;gt;&amp;gt; Iteratee.getChunks.map(Right(_))
	}

	def processLine(line: Array[String]): String = {
		var dataList = line.toList
		var msg = &amp;quot;&amp;quot;
		if (dataList.length &amp;gt;= 1) {
			var dataMap = headerList.toList.zip(dataList).toMap
// dataMap map containing the header and corresponding column for the current row
// You can write your logic to add this into database or what ever you want
//msg =&amp;quot;any success message you can pass&amp;quot;
}
msg
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;explanation&#34;&gt;Explanation&lt;/h1&gt;

&lt;p&gt;In our case as we are parsing a csv file, every row is separated by a new line character. Therefore we need chunks based on the new line to distinguish each line separately and process it. But browsers creates the chunks by its own irrespective of what the separator is.&lt;/p&gt;

&lt;p&gt;Our requirement is to get such an Iteratee which can consume each line at one go and process it. Our source of data here is chunks of Array[Byte] which may not contain new line char or may be containing more than one new lines. Therefore it has to be adapted such that it can match the type our Iteratee is expecting.&lt;/p&gt;

&lt;h1 id=&#34;enumeratee&#34;&gt;Enumeratee&lt;/h1&gt;

&lt;p&gt;To adapt one Type of Enumerator to the another type we have Enumeratee which is pipe adapter between Enumerator and Iteratee. It basically transform one Type of Enumerator to other type. For example Enumerator[Int] can be transformed into Enumerator[String] by applying Enumeratee[Int,String] on Enumerator[Int]. Enumeratee[A,B] can also be composed with an Enumeratee[B,C] to give Enumeratee[A,C].&lt;/p&gt;

&lt;p&gt;In the parseCsvData method above you can see we have used Parsing.search(“n”.getBytes) .It searches for new line and gives an Enumeratee[Array[Byte], Parsing.MatchInfo[Array[Byte]]]. then  We compose it with Enumeratee.grouped to regroup on new line. By applying (Enumeratee.breakE&lt;a href=&#34;_.isMatch&#34;&gt;Parsing.MatchInfo[Array[Byte]]&lt;/a&gt;, which is again an adapter that breaks on new line.&lt;/p&gt;

&lt;p&gt;It Gives a new Enumertee which pushes everything it has on to the Iteratee by applying Iteratee.consume[Array[Byte]] which consumes and concatenates all Input chunks and return a Promise.Finally  by applying flatMap we can get actual data for a row.&lt;/p&gt;

&lt;p&gt;Iteratee.head creates an Iteratee that takes the first element of the stream. This element can be anything like header of the csv (first line) ,data or any other information associated with the body. Each column in the csv is separated by comma so we can split it to get the Array. By checking the size we can identify the header. As soon as we get the header we set the flag to true to identify every subsequent row as a data. Now we can process each line, as we have done in the processLine method by zipping the header and column to generate key value pair of header and column. You can do anything with this data to serve your purpose.&lt;/p&gt;

&lt;p&gt;With a little bit of understanding of Play and Iteratees we can now asynchronously upload large bytes of data without stretching the memory requirements.&lt;/p&gt;

&lt;p&gt;Inspired by: &lt;a href=&#34;https://gist.github.com/sadache/2939230&#34;&gt;https://gist.github.com/sadache/2939230&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spraying rest applications with spray</title>
      <link>/brijeshpant.com/2016/01/sprayingrestwithspray/</link>
      <pubDate>Sat, 30 Jan 2016 15:05:59 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/01/sprayingrestwithspray/</guid>
      <description>

&lt;p&gt;Spray is a suite of lightweight Scala libraries providing client- and server-side REST/HTTP support on top of Akka.  Akka makes the application fully asynchronous. There are other frameworks build on top of Akka such as Play that gives  ability to build full web application but with one down side and that is  application becomes highly coupled with the framework as the application build on top of Play. As oppose to that spray gives  ability to create  Application layer independent of  anything without even thinking of the framework. Spray will just work as an  integration layer to shake hand between outer world and the application. Outer world could be any web,mobile or third party applications.&lt;/p&gt;

&lt;p&gt;In this blog post we will see how to setup spray environment for the Scala application and also learn about some of the building blocks. In the upcoming post we will see simple  example of writing rest Api&amp;rsquo;s, authentication support, cross origin support and actor handling also most important part of the development unit test spray routes.&lt;/p&gt;

&lt;h1 id=&#34;table-of-content:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Basic setup&#34;&gt;Basic setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Spray-can&#34;&gt;Spray-can&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Spray-routing&#34;&gt;Spray-routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Directives&#34;&gt;Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-setup:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Basic setup&lt;/h2&gt;

&lt;p&gt;To start with we need to firstly create the sbt project.&lt;/p&gt;

&lt;p&gt;build.sbt consists of following lines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name := &amp;quot;SprayingRestWithSpray&amp;quot;

version := &amp;quot;1.0&amp;quot;

libraryDependencies ++= {
    val akkaV = &amp;quot;2.3.6&amp;quot;
    val sprayV = &amp;quot;1.3.2&amp;quot;
    Seq(
        &amp;quot;io.spray&amp;quot;            %%   &amp;quot;spray-can&amp;quot;     % sprayV,
        &amp;quot;io.spray&amp;quot;            %%   &amp;quot;spray-routing&amp;quot; % sprayV,
        &amp;quot;com.typesafe.akka&amp;quot;   %%  &amp;quot;akka-actor&amp;quot;    % akkaV
    )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using akka version 2.3.6 and spray version 1.3.2
we have defined 3  libraries  spray-can ,spray-routing and akka-actor. These are sufficient to start building spray application. We will keep adding other spray libraries as and when needed. This is the beauty of spray that you use only what you needed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand why these libraries are for&lt;/p&gt;

&lt;h3 id=&#34;spray-can:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Spray-can&lt;/h3&gt;

&lt;p&gt;A low-level, low-overhead, high-performance HTTP server and client built on top of spray-io. When spray-can server get started,It starts a new listener actor which can handle thousands of  incoming requests asynchronously.&lt;/p&gt;

&lt;h3 id=&#34;spray-routing:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Spray-routing&lt;/h3&gt;

&lt;p&gt;A high-level routing DSL for elegantly defining RESTful web services. It provides abstraction layer over the spray-http . It saves developers efforts of writing boiler plate code and provide them the simple interface to build  the application.&lt;/p&gt;

&lt;p&gt;Now we will start doing the real action by creating the Main object which starts the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; object Main extends App {

     implicit val system = ActorSystem(&amp;quot;SprayingRestWithSpray&amp;quot;)
     val apiRouteHandlerActor = system.actorOf(Props[RequestHandlerActor], &amp;quot;application-actor&amp;quot;)
     (IO(Http) ! Http.Bind(apiRouteHandlerActor, interface = &amp;quot;localhost&amp;quot;, port = 8080))
 }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we just did is bind the apiRouteHandlerActor  to the http port 8080 on localhost. Any subsequent request  will be passed on to the apiRouterHandler in the form of RequestContext message.&lt;/p&gt;

&lt;p&gt;Now we will create RequestHandlerActor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class RequestHandlerActor extends HttpServiceActor{
    override def receive: Receive = runRoute(route)
   val route:Route =  path(&amp;quot;firstRoute&amp;quot;){
        complete(&amp;quot;Request completed&amp;quot;)
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RequestHandlerActor extends HttpServiceActor which extends HttpService.&lt;/p&gt;

&lt;p&gt;HttpService provides execution context to the request which it receives.
In the example above we have override receive method with partial function runRoute of HttpService which takes Route type as parameter. In spray-routing Route has following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Route = RequestContext =&amp;gt; Unit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the structure you define will be subtype of Route.&lt;/p&gt;

&lt;h2 id=&#34;directives:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Directives&lt;/h2&gt;

&lt;p&gt;We can combine multiple such structure to form a complex Route. These building blocks are termed as Directive in spray. Spray comes up with predefined Directives for handling almost every type of request one can encounter. But we can create our own Directives if required by modifying or combining these Directives.&lt;/p&gt;

&lt;p&gt;One such Directive is path Directive, which matches the part of uri.
In the example above our path directive matches the path &amp;ldquo;firstRoute&amp;rdquo;. On encountering request localhost:8080/firstRoute request will be forwarded to this Directive and the request is completed by  complete method of RequestContext.&lt;/p&gt;

&lt;p&gt;The complete method creates an HttpResponse an sends it to responder of the RequestContext.&lt;/p&gt;

&lt;p&gt;You can find out sample code &lt;a href=&#34;https://github.com/Brijeshpant/SprayingRestWithSpray.git&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:a846ee36b0a32d4baa95d852ff656c38&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post we explored how to set up spray application,learned about basic ingredients of the spray.In my upcoming  blog we will deep dive in detail and we will be using these ingredients to create more stuff about Rest Api&amp;rsquo;s through spray.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Domain Driven Design Angularjs way</title>
      <link>/brijeshpant.com/2016/01/domaindrivendesignangular/</link>
      <pubDate>Sat, 30 Jan 2016 09:52:16 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/2016/01/domaindrivendesignangular/</guid>
      <description>

&lt;h1 id=&#34;domain-driven-design-in-angularjs:84866485eb4ec6c0fb1947a0cf273d70&#34;&gt;Domain Driven Design in angularjs&lt;/h1&gt;

&lt;p&gt;For developing any software we need to have clear understanding of design philosophy which will be followed to solve the given problem.We do have myriads of options. Based on the requirements we choose the best fit.One of the design philosophy is Domain Driven design.&lt;/p&gt;

&lt;h2 id=&#34;ddd:84866485eb4ec6c0fb1947a0cf273d70&#34;&gt;DDD&lt;/h2&gt;

&lt;p&gt;An object model of the domain that incorporates both behavior and data.When we talk about domain layer it is responsible for representing concepts of the business, information about the business situation, and business rules. State that reflects the business situation is controlled and used here, even though the technical details of storing it are delegated to the infrastructure. This layer is the heart of business software.&lt;/p&gt;

&lt;h2 id=&#34;example-problem:84866485eb4ec6c0fb1947a0cf273d70&#34;&gt;Example problem&lt;/h2&gt;

&lt;p&gt;Let us take an example of simple problem.
We have a user that can have one of the role USER,ADMIN or SUPERUSER
And We have list of jobs.
Now We need to create a dashboard. where in we have to display jobs.
We have following business rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ADMIN and SUPER USER can see all the jobs.&lt;/li&gt;
&lt;li&gt;Normal USER can see only those jobs for which his education matches.&lt;/li&gt;
&lt;li&gt;USER can apply for a job if it is not already applied by him and job is Active and it&amp;rsquo;s status is OPEN.&lt;/li&gt;
&lt;li&gt;If job is already applied by USER,He can Un apply.&lt;/li&gt;
&lt;li&gt;ADMIN and SUPER USER can&amp;rsquo;t apply jobs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Firstly we will solve this problem with normal approach
Create angular module&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;app&#39;, [&#39;app.service&#39;]).controller(&#39;userCtrl&#39;, function ($scope,UserService,JobService) {
    $scope.user = UserService.getUser();
    $scope.jobs = JobService.getJobs();
    $scope.applyJob = function (job) {
        $scope.user.appliedJob.push(job);
    };
    $scope.unApplyJob = function (job) {
        $scope.user.appliedJob.splice($scope.user.appliedJob.indexOf(job), 1);
    };

});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above module we just define a userCtrl. And injected UserService and JobService. UserService provides the user.
and JobService provides the job listing.&lt;/p&gt;

&lt;p&gt;We have two methods applyJob and unApplyJob in our controller
. using them user can apply and unapply for job.
We will now define our services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;angular.module(&#39;app.service&#39;, []).service(&#39;UserService&#39;, function () {
   this.getUser = function(){
          var user= {
              name: &amp;quot;Brij&amp;quot;, role: &amp;quot;ADMIN&amp;quot;, profile: {
                  email    : &amp;quot;bpant@xebia.com&amp;quot;, mobile: 1111111111,
                  education: {
                      degree: &amp;quot;MCA&amp;quot;
                  }
              },
              appliedJob     : []
          };
       return user;
   };
}).service(&#39;JobService&#39;, function () {
      this.getJobs = function (){
          var jobs = [

              {   id            : 1,
                  active       : true,
                  profile      : &amp;quot;MANAGER&amp;quot;,
                  qualification: [&amp;quot;MBA&amp;quot;, &amp;quot;BBA&amp;quot;],
                  status       : &amp;quot;OPEN&amp;quot;
              },
              {   id           : 2,
                  active       : true,
                  profile      : &amp;quot;RECRUITER&amp;quot;,
                  qualification: [&amp;quot;MBA&amp;quot;, &amp;quot;BBA&amp;quot;],
                  status       : &amp;quot;OPEN&amp;quot;
              },
              {   id           : 3,
                  active       : true,
                  profile      : &amp;quot;IT_HEAD&amp;quot;,
                  qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;MTECH&amp;quot;],
                  status       : &amp;quot;OPEN&amp;quot;
              },
              {   id           : 4,
                  active       : true,
                  profile      : &amp;quot;SOFTWARE DEVELOPER&amp;quot;,
                  qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;BCA&amp;quot;],
                  status       : &amp;quot;OPEN&amp;quot;
              } ,
              {   id           : 5,
                  active       : true,
                  profile      : &amp;quot;SOFTWARE TESTER&amp;quot;,
                  qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;BCA&amp;quot;],
                  status       : &amp;quot;CLOSED&amp;quot;
              }
          ];
          return jobs;
      };

});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For creating Dashboard we will create index.html page&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;userCtrl&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;User Dashboard&amp;lt;/h3&amp;gt;
    &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Name:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.name}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Email:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.profile.email}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Education:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.profile.education.degree}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Applied Jobs:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-repeat=&amp;quot;job in user.appliedJob track by $index&amp;quot;&amp;gt; {{job.profile}}&amp;lt;/Span&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Profile&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Qualification&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Apply&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
        &amp;lt;tr ng-if=&amp;quot; user.role==&#39;ADMIN&#39; || user.role==&#39;SUPER_USER&#39;&amp;quot; ng-repeat=&amp;quot;job in jobs&amp;quot;&amp;gt;
            &amp;lt;td&amp;gt;{{ job.profile}}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-repeat=&amp;quot; qualification in job.qualification &amp;quot;&amp;gt; {{qualification}}&amp;lt;/Span&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;
                &amp;lt;div ng-switch=&amp;quot; user.appliedJob.indexOf(job)&amp;quot;&amp;gt;
                               &amp;lt;span ng-switch-when=&amp;quot;-1&amp;quot;&amp;gt;
                                &amp;lt;span ng-if=&amp;quot;job.active &amp;amp;&amp;amp; job.status==&#39;OPEN&#39;&amp;quot;&amp;gt; &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-ok&amp;quot; ng-click=&amp;quot;applyJob(job)&amp;quot; value=&amp;quot;Apply&amp;quot;&amp;gt;Apply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;
                              &amp;lt;span ng-switch-default&amp;gt;
                                  &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-remove&amp;quot; ng-click=&amp;quot;unApplyJob(job)&amp;quot; value=&amp;quot;UnApply&amp;quot;&amp;gt;UnApply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr ng-if=&amp;quot;user.role==&#39;USER&#39;&amp;quot; ng-repeat=&amp;quot;job in jobs | filter: {qualification:user.profile.education.degree}&amp;quot;&amp;gt;
            &amp;lt;td&amp;gt;{{ job.profile}}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-repeat=&amp;quot; qualification in job.qualification &amp;quot;&amp;gt; {{qualification}}&amp;lt;/Span&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;
                &amp;lt;div ng-switch=&amp;quot; user.appliedJob.indexOf(job)&amp;quot;&amp;gt;
                               &amp;lt;span ng-switch-when=&amp;quot;-1&amp;quot;&amp;gt;
                                &amp;lt;span ng-if=&amp;quot;job.active &amp;amp;&amp;amp; job.status==&#39;OPEN&#39;&amp;quot;&amp;gt; &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-ok&amp;quot; ng-click=&amp;quot;applyJob(job)&amp;quot; value=&amp;quot;Apply&amp;quot;&amp;gt;Apply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;
                              &amp;lt;span ng-switch-default&amp;gt;
                                  &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-remove&amp;quot; ng-click=&amp;quot;unApplyJob(job)&amp;quot; value=&amp;quot;UnApply&amp;quot;&amp;gt;UnApply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;hr&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/service.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;problem-with-this-approach:84866485eb4ec6c0fb1947a0cf273d70&#34;&gt;Problem with this approach&lt;/h2&gt;

&lt;p&gt;You can see all our behavior is lied in the presentation layer. For displaying jobs we have applied all logic in our html file. moreover we have repeated our code to display jobs for normal user and for Admin/Superuser.
Similarly we have applied all the logic for displaying apply and unApply button in the html itself. We definitely should not have these logic in presentation layer.we can put these logics in our controller.But What if we want to bind this page with multiple controllers? We will have to write these logic in all those controllers.Situation will be more horrifying when our business demands some changes in the logic.Go find all the places and make those changes.&lt;/p&gt;

&lt;h2 id=&#34;time-for-refactoring:84866485eb4ec6c0fb1947a0cf273d70&#34;&gt;Time for refactoring&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s think in different way.
 We know in the current problem space we have two entities user and job. user&amp;rsquo;s behavior changes based in its role.If it is Admin it has access to all jobs. But if it is normal user he can see only jobs which matches his education.
 Job could be applied based on the behavior status.
 So, now we will create Domain object for user and job. That will bind the behavior with them&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; factory(&#39;User&#39;, function () {
            return function (user) {
                this.id = user.id;
                this.name=user.name;
                this.role = user.role;
                this.profile = user.profile;
                this.appliedJob = user.appliedJob;

                this.userViewableJobs = function (jobs) {
                    var userViewableJobs = [];
                    self =this;
                    if (this.role === &#39;ADMIN&#39; || this.role === &#39;SUPER_USER&#39;) return jobs;
                    else {
                        angular.forEach(jobs, function (job) {
                            console.log(&#39;job &#39;+job);
                            if (job.qualification.indexOf(self.profile.education.degree) !== -1) {
                                userViewableJobs.push(job);
                            }
                        })
                    }
                    return userViewableJobs;
                }
                this.canApplyForJob = function(job){
                  return job.canBeApplied() &amp;amp;&amp;amp; !this.hasAlreadyAppliedForJob(job);
                }
                this.hasAlreadyAppliedForJob = function(job){
                    return this.appliedJob.indexOf(job) !=-1;
                }

                this.applyForJob = function (job) {
                    this.appliedJob.push(job);
                };
                this.unApplyJob = function (job) {
                    this.appliedJob.splice(this.appliedJob.indexOf(job), 1);
                };

            };
        })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have bind following behavior with the User&lt;/p&gt;

&lt;p&gt;userViewableJobs : based on role it will decide which jobs can be viewed by the user&lt;/p&gt;

&lt;p&gt;canApplyForJob : it will check if job can be applied.&lt;/p&gt;

&lt;p&gt;hasAlreadyAppliedForJob :it will check if job already applied by user&lt;/p&gt;

&lt;p&gt;applyForJob : it will add job to the applied job list&lt;/p&gt;

&lt;p&gt;unApplyJob : it will remove the job from the users listing&lt;/p&gt;

&lt;p&gt;create Job domain object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;factory(&#39;Job&#39;, function () {
            return function (job) {
                this.id = job.id;
                this.active = job.active;
                this.profile = job.profile;
                this.qualification = job.qualification;
                this.status = job.status;
                this.canBeApplied = function(){
                    return this.active &amp;amp;&amp;amp; this.status === &#39;OPEN&#39;;
                }
            };

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Modify service to return User and Jobs as factory object instead of normal object&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this.getUser = function(){
          var user= {   id:1,
              name: &amp;quot;Brij&amp;quot;, role: &amp;quot;ADMIN&amp;quot;, profile: {
                  email    : &amp;quot;bpant@xebia.com&amp;quot;, mobile: 1111111111,
                  education: {
                      degree: &amp;quot;MCA&amp;quot;
                  }
              },
              appliedJob     : []
          };
       return new User(user);
   };
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;this.getJobs = function (){

        var jobs = [];
        angular.forEach([

            {   id            : 1,
                active       : true,
                profile      : &amp;quot;MANAGER&amp;quot;,
                qualification: [&amp;quot;MBA&amp;quot;, &amp;quot;BBA&amp;quot;],
                status       : &amp;quot;OPEN&amp;quot;
            },
            {   id           : 2,
                active       : true,
                profile      : &amp;quot;RECRUITER&amp;quot;,
                qualification: [&amp;quot;MBA&amp;quot;, &amp;quot;BBA&amp;quot;],
                status       : &amp;quot;OPEN&amp;quot;
            },
            {   id           : 3,
                active       : true,
                profile      : &amp;quot;IT_HEAD&amp;quot;,
                qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;MTECH&amp;quot;],
                status       : &amp;quot;OPEN&amp;quot;
            },
            {   id           : 4,
                active       : true,
                profile      : &amp;quot;SOFTWARE DEVELOPER&amp;quot;,
                qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;BCA&amp;quot;],
                status       : &amp;quot;OPEN&amp;quot;
            } ,
            {   id           : 5,
                active       : true,
                profile      : &amp;quot;SOFTWARE TESTER&amp;quot;,
                qualification: [&amp;quot;MCA&amp;quot;, &amp;quot;BCA&amp;quot;],
                status       : &amp;quot;CLOSED&amp;quot;
            }
        ],function(job){
           jobs.push(new Job(job))
        });
        return jobs;
    };
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;remove applyJob and unApplyJob function from userCtrl as they are now part of User domain&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;controller(&#39;userCtrl&#39;, function ($scope,UserService,JobService) {

    $scope.user = UserService.getUser();
    $scope.jobs = JobService.getJobs();

})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we will modify our index page&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;body ng-app=&amp;quot;app&amp;quot; ng-controller=&amp;quot;userCtrl&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
    &amp;lt;h3&amp;gt;User Dashboard&amp;lt;/h3&amp;gt;
    &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Name:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.name}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Email:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.profile.email}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Education:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;{{user.profile.education.degree}}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;td&amp;gt;Applied Jobs:&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-repeat=&amp;quot;job in user.appliedJob track by $index&amp;quot;&amp;gt; {{job.profile}}&amp;lt;/Span&amp;gt;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;table class=&amp;quot;table table-striped&amp;quot;&amp;gt;
        &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;Profile&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Qualification&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;Apply&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;

        &amp;lt;tr ng-repeat=&amp;quot; job in user.userViewableJobs(jobs)&amp;quot;&amp;gt;
            &amp;lt;td&amp;gt;{{ job.profile}}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-repeat=&amp;quot; qualification in job.qualification &amp;quot;&amp;gt; {{qualification}}&amp;lt;/Span&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;
                &amp;lt;span ng-if=&amp;quot;user.canApplyForJob(job)&amp;quot;&amp;gt;
                    &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-ok&amp;quot; ng-click=&amp;quot;user.applyForJob(job)&amp;quot; value=&amp;quot;Apply&amp;quot;&amp;gt;Apply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;/span&amp;gt;
                 &amp;lt;span ng-if=&amp;quot;user.hasAlreadyAppliedForJob(job)&amp;quot;&amp;gt;
                 &amp;lt;button class=&amp;quot;btn glyphicon glyphicon-remove&amp;quot; ng-click=&amp;quot;user.unApplyJob(job)&amp;quot; value=&amp;quot;UnApply&amp;quot;&amp;gt;UnApply&amp;lt;/button&amp;gt;&amp;lt;/span&amp;gt;
            &amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;hr&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script src=&amp;quot;js/app.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/domain.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;js/service.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can see now our code has become much cleaner,We need not to worry about the business logic in our presentation layer.Our controller has become free from any sort of responsibilities of modifying the model object.All the behavior related to the domain is abstracted from the outer world. You can use these domain objects any where in your application and can change them without any hiccup.&lt;/p&gt;

&lt;p&gt;You can find out sample code &lt;a href=&#34;https://github.com/Brijeshpant/DDD-Angular-example.git&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>learnVim</title>
      <link>/brijeshpant.com/learnVim/</link>
      <pubDate>Tue, 26 Jan 2016 22:58:46 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.com/learnVim/</guid>
      <description>&lt;p&gt;Learning vim is easy&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>