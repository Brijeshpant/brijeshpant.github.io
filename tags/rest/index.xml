<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rest on Brijesh Pant</title>
    <link>brijeshpant.github.io/tags/rest/</link>
    <description>Recent content in Rest on Brijesh Pant</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>pantbrijesh20@gmail.com (brijesh pant)</managingEditor>
    <webMaster>pantbrijesh20@gmail.com (brijesh pant)</webMaster>
    <lastBuildDate>Mon, 01 Feb 2016 22:43:02 +0530</lastBuildDate>
    <atom:link href="brijeshpant.github.io/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Spray JSON to build your REST API</title>
      <link>/brijeshpant.github.io/2016/02/spray-json-support/</link>
      <pubDate>Mon, 01 Feb 2016 22:43:02 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.github.io/2016/02/spray-json-support/</guid>
      <description>&lt;p&gt;For any of the rest application itâ€™s state has to be serialize or deserialized while transferring back and forth between application and the network. spray-json provide such support for the json based state representation.
 For using spray-json we just need to  add &amp;lsquo;spray-json&amp;rsquo; dependency in the project. For instance adding support in the sbt project add following to the build file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;io.spray&amp;quot; %% &amp;quot;spray-json&amp;quot; % &amp;quot;1.3.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spray-json provides JsonFormater to serialize/deserialize all of the scala types. i.e. for String type
we have existing StringJsonFormat&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit object StringJsonFormat extends JsonFormat[String] {
  def write(x: String) = {
    require(x ne null)
    JsString(x)
  }
  def read(value: JsValue) = value match {
    case JsString(x) =&amp;gt; x
    case x =&amp;gt; deserializationError(&amp;quot;Expected String as JsString, but got &amp;quot; + x)
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which read JsString and convert it to Scala String and vise-versa.&lt;/p&gt;

&lt;p&gt;In similar way spray-json provides different traits to support serialization of all of the Scala basic types,tuples,collection etc.
Formater for all of these types are clubbed together in the trait called DefaultJsonProtocol. So for serializing/deserializing these types we just need to
put this implicit types in the scope.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import spray.json.DefaultJsonProtocol._

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Following test should be proof of the correct conversion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;val jsString =  new JsString(&amp;quot;JsString&amp;quot;)
assert(StringJsonFormat.read(jsString).equals(&amp;quot;JsString&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;additionally spray json provides methods to convert the object into json or vice versa&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsString.convertTo[String]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which converts JsValue to the type.&lt;/p&gt;

&lt;p&gt;For converting type into json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;String&amp;quot;.toJson
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: for using toJson&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import spray.json._
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For any of the user defined type. We have to create our own Formatter. But that isn&amp;rsquo;t any harder.&lt;/p&gt;

&lt;p&gt;let say we have a case class&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class User(name:String,email:String,isActive:Boolean)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;now to support serialization we need to create a new protocol&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;object UserProtocol extends DefaultJsonProtocol {
    implicit val userFormat = jsonFormat3(User)
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;our protocol extends the DefaultJsonProtocol. and depending on the attributes in the case class we need to just call the jsonFormatn
where n is the no of attributes in the case class.
spray json provides such support for all the possible no&amp;rsquo;s of attribute of the case class as long as their type is supported by the DefaultJsonProtocol.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import UserProtocol._
import spray.json._
test(&amp;quot;User object should be able to convert into json and vise-versa&amp;quot;) {
   import UserProtocol.userFormat
   val user = User(&amp;quot;brij&amp;quot;,&amp;quot;pantbrijesh20@gmail.com&amp;quot;,true)
   val aa = user.toJson
   val userJson = &amp;quot;&amp;quot;&amp;quot;{&amp;quot;name&amp;quot;:&amp;quot;brij&amp;quot;,&amp;quot;email&amp;quot;:&amp;quot;pantbrijesh20@gmail.com&amp;quot;,&amp;quot;isActive&amp;quot;:true}&amp;quot;&amp;quot;&amp;quot;
   assert(user.toJson.toString == userJson)
   assert(userJson.parseJson.convertTo[User] == User(&amp;quot;brij&amp;quot;,&amp;quot;pantbrijesh20@gmail.com&amp;quot;,true) )

 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In general custom type doesn&amp;rsquo;t only contains predefined types but also the user defined types. In this case additionally to the DefaultJsonProtocol we need to have the protocol for the user defined type in the scope.
for example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;case class UserProfile(user:User,profile:String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here User profile has User type as its attribute.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;implicit val userProfileFormat = jsonFormat2(UserProfile)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So this will only work if &lt;code&gt;
implicit val userFormat = jsonFormat3(User)&lt;/code&gt; will be in it&amp;rsquo;s scope.&lt;/p&gt;

&lt;p&gt;What we can to do is all the custom protocol can be wrapped in a single trait. In this case you just ned to include this trait into your scope.&lt;/p&gt;

&lt;p&gt;The above approach works good when we are dealing with case classes. But if we have to work with Scala class, we will have to do more work than this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Person(val name: String, val age: Int)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;object PersonProtocol {
    def write(p: Person) = JsArray(JsString(p.name), JsNumber(p.age))

    def read(value: JsValue) = {
      value.asJsObject match {
        case Seq(JsArray(Vector(JsString(name), JsNumber(age)))) =&amp;gt; new Person(name, age.toInt)
        case _ =&amp;gt; throw new DeserializationException(&amp;quot;object not convertable&amp;quot;)
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we will have to write our own read and write function&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spraying rest applications with spray</title>
      <link>/brijeshpant.github.io/2016/01/spraying_rest_with_spray/</link>
      <pubDate>Sat, 30 Jan 2016 15:05:59 +0530</pubDate>
      <author>pantbrijesh20@gmail.com (brijesh pant)</author>
      <guid>/brijeshpant.github.io/2016/01/spraying_rest_with_spray/</guid>
      <description>

&lt;p&gt;Spray is a suite of lightweight Scala libraries providing client- and server-side REST/HTTP support on top of Akka.  Akka makes the application fully asynchronous. There are other frameworks build on top of Akka such as Play that gives  ability to build full web application but with one down side and that is  application becomes highly coupled with the framework as the application build on top of Play. As oppose to that spray gives  ability to create  Application layer independent of  anything without even thinking of the framework. Spray will just work as an  integration layer to shake hand between outer world and the application. Outer world could be any web,mobile or third party applications.&lt;/p&gt;

&lt;p&gt;In this blog post we will see how to setup spray environment for the Scala application and also learn about some of the building blocks. In the upcoming post we will see simple  example of writing rest Api&amp;rsquo;s, authentication support, cross origin support and actor handling also most important part of the development unit test spray routes.&lt;/p&gt;

&lt;h1 id=&#34;table-of-content:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Table of content&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#Basic setup&#34;&gt;Basic setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Spray-can&#34;&gt;Spray-can&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Spray-routing&#34;&gt;Spray-routing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Directives&#34;&gt;Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#Conclusion&#34;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;basic-setup:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Basic setup&lt;/h2&gt;

&lt;p&gt;To start with we need to firstly create the sbt project.&lt;/p&gt;

&lt;p&gt;build.sbt consists of following lines&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;name := &amp;quot;SprayingRestWithSpray&amp;quot;

version := &amp;quot;1.0&amp;quot;

libraryDependencies ++= {
    val akkaV = &amp;quot;2.3.6&amp;quot;
    val sprayV = &amp;quot;1.3.2&amp;quot;
    Seq(
        &amp;quot;io.spray&amp;quot;            %%   &amp;quot;spray-can&amp;quot;     % sprayV,
        &amp;quot;io.spray&amp;quot;            %%   &amp;quot;spray-routing&amp;quot; % sprayV,
        &amp;quot;com.typesafe.akka&amp;quot;   %%  &amp;quot;akka-actor&amp;quot;    % akkaV
    )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are using akka version 2.3.6 and spray version 1.3.2
we have defined 3  libraries  spray-can ,spray-routing and akka-actor. These are sufficient to start building spray application. We will keep adding other spray libraries as and when needed. This is the beauty of spray that you use only what you needed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s understand why these libraries are for&lt;/p&gt;

&lt;h3 id=&#34;spray-can:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Spray-can&lt;/h3&gt;

&lt;p&gt;A low-level, low-overhead, high-performance HTTP server and client built on top of spray-io. When spray-can server get started,It starts a new listener actor which can handle thousands of  incoming requests asynchronously.&lt;/p&gt;

&lt;h3 id=&#34;spray-routing:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Spray-routing&lt;/h3&gt;

&lt;p&gt;A high-level routing DSL for elegantly defining RESTful web services. It provides abstraction layer over the spray-http . It saves developers efforts of writing boiler plate code and provide them the simple interface to build  the application.&lt;/p&gt;

&lt;p&gt;Now we will start doing the real action by creating the Main object which starts the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; object Main extends App {

     implicit val system = ActorSystem(&amp;quot;SprayingRestWithSpray&amp;quot;)
     val apiRouteHandlerActor = system.actorOf(Props[RequestHandlerActor], &amp;quot;application-actor&amp;quot;)
     (IO(Http) ! Http.Bind(apiRouteHandlerActor, interface = &amp;quot;localhost&amp;quot;, port = 8080))
 }

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What we just did is bind the apiRouteHandlerActor  to the http port 8080 on localhost. Any subsequent request  will be passed on to the apiRouterHandler in the form of RequestContext message.&lt;/p&gt;

&lt;p&gt;Now we will create RequestHandlerActor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class RequestHandlerActor extends HttpServiceActor{
    override def receive: Receive = runRoute(route)
   val route:Route =  path(&amp;quot;firstRoute&amp;quot;){
        complete(&amp;quot;Request completed&amp;quot;)
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RequestHandlerActor extends HttpServiceActor which extends HttpService.&lt;/p&gt;

&lt;p&gt;HttpService provides execution context to the request which it receives.
In the example above we have override receive method with partial function runRoute of HttpService which takes Route type as parameter. In spray-routing Route has following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Route = RequestContext =&amp;gt; Unit

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the structure you define will be subtype of Route.&lt;/p&gt;

&lt;h2 id=&#34;directives:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Directives&lt;/h2&gt;

&lt;p&gt;We can combine multiple such structure to form a complex Route. These building blocks are termed as Directive in spray. Spray comes up with predefined Directives for handling almost every type of request one can encounter. But we can create our own Directives if required by modifying or combining these Directives.&lt;/p&gt;

&lt;p&gt;One such Directive is path Directive, which matches the part of uri.
In the example above our path directive matches the path &amp;ldquo;firstRoute&amp;rdquo;. On encountering request localhost:8080/firstRoute request will be forwarded to this Directive and the request is completed by  complete method of RequestContext.&lt;/p&gt;

&lt;p&gt;The complete method creates an HttpResponse an sends it to responder of the RequestContext.&lt;/p&gt;

&lt;p&gt;You can find out sample code &lt;a href=&#34;https://github.com/Brijeshpant/SprayingRestWithSpray.git&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;conclusion:4676a1a24d2f1e0be2dd880eec4ede0a&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In this post we explored how to set up spray application,learned about basic ingredients of the spray.In my upcoming  blog we will deep dive in detail and we will be using these ingredients to create more stuff about Rest Api&amp;rsquo;s through spray.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>